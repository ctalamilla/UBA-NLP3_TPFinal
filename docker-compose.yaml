# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:2.4.1
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---
version: '3'
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  #image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.4.1}
  env_file:
    - .env
  build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- pandas tiktoken numpy python-dotenv openai pinecone-client rank-bm25 sentence-transformers pdfplumber gradio pymupdf }
    # ✅ Conexión automática a MinIO como S3
    AIRFLOW_CONN_MINIO_S3: s3://minio_admin:minio_admin@minio:9000/?endpoint_url=http%3A%2F%2Fminio%3A9000
    AIRFLOW__CELERY__WORKER_LOG_SERVER_PORT: 8793
    AIRFLOW__LOGGING__REMOTE_LOGGING: 'False'
    PINECONE_API_KEY: ${PINECONE_API_KEY}
    PINECONE_REGION: ${PINECONE_REGION}            # para cliente nuevo (ServerlessSpec)
    PINECONE_ENVIRONMENT: ${PINECONE_ENVIRONMENT}
    OPENAI_API_KEY: ${OPENAI_API_KEY}
    OPENAI_MODEL: ${OPENAI_MODEL}
    OPENAI_GUARDRAIL_MODEL: gpt-4
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./datalake:/opt/airflow/datalake
    - ./mlruns:/opt/airflow/mlruns
    - ./mlflow:/mlflow
    - ./fastapi_app:/app

  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      #- ./db/init_db_weather.sql:/docker-entrypoint-initdb.d/init_db_weather.sql
      #- ./init_db_bash.sh:/docker-entrypoint-initdb.d/init_db_bash.sh
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always

    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - .:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully


  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Console
    environment:
      MINIO_ROOT_USER: minio_admin
      MINIO_ROOT_PASSWORD: minio_admin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - default

  init-minio:
    image: minio/mc
    container_name: init-minio
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        sleep 10;
        mc alias set myminio http://minio:9000 minio_admin minio_admin;
        mc mb --ignore-existing myminio/respaldo2;
        echo 'Desde Airflow por variable de entorno' > /tmp/prueba.txt;
        mc cp /tmp/prueba.txt myminio/respaldo2/prueba.txt;
        exit 0;
      "
    networks:
      - default
  
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.11.3
    container_name: mlflow
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    ports:
      - "5001:5000"
    command: mlflow server --backend-store-uri sqlite:///mlflow.db --default-artifact-root /mlflow/artifacts --host 0.0.0.0
    volumes:
      - ./mlflow:/mlflow
    networks:
      - default
# RAG
  rag_api:
    build:
      context: .
      dockerfile: fastapi_app/Dockerfile
    container_name: fast_api_app
    depends_on:
      - minio
    ports:
      - "8000:8000"
    volumes:
    # monta tu app
    - ./fastapi_app:/code/fastapi_app
    # monta tus módulos de la notebook (paquete 'tasks')
    - ./plugins/tasks:/code/tasks
    environment:
      # ---- S3/MinIO (coincide con lo que ya usa Airflow) ----
      S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-minio_admin}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-minio_admin}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-1}
      S3_BUCKET: ${S3_BUCKET:-respaldo2}
      PYTHONPATH: /code

      # ---- Rutas usadas por el pipeline ----
      BM25_MODEL_KEY: ${BM25_MODEL_KEY:-rag/models/2025/bm25.pkl}
      CHUNKS_PREFIX: ${CHUNKS_PREFIX:-rag/chunks_op/2025/}

      # ---- Pinecone ----
      PINECONE_API_KEY: ${PINECONE_API_KEY}
      PINECONE_INDEX: ${PINECONE_INDEX:-boletines-2025}
      PINECONE_NAMESPACE: ${PINECONE_NAMESPACE:-2025}
      # Para serverless (cliente nuevo): una de estas dos variables, según tu cuenta
      PINECONE_REGION: ${PINECONE_REGION:-us-east-1}
      PINECONE_ENVIRONMENT: ${PINECONE_ENVIRONMENT:-us-east1-gcp}

      # ---- OpenAI (agentes: guardrail, summary, respuesta, salida) ----
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_GUARD_MODEL: ${OPENAI_GUARD_MODEL:-gpt-4o-mini}
      OPENAI_SUMMARY_MODEL: ${OPENAI_SUMMARY_MODEL:-gpt-4o-mini}
      OPENAI_ANSWER_MODEL: ${OPENAI_ANSWER_MODEL:-gpt-4o-mini}
      OPENAI_OUT_GUARD_MODEL: ${OPENAI_OUT_GUARD_MODEL:-gpt-4o-mini}

      # ---- (Opcional) Rerank cross-encoder ----
      # RERANK_MODEL: cross-encoder/ms-marco-MiniLM-L-12-v2

    # Opcional: modo desarrollo con hot-reload (monta tu código local)
    # volumes:
    #   - ./fastapi_app:/code/fastapi_app:ro


  rag_notebook:
    build:
      context: ./rag_notebook
      dockerfile: Dockerfile
    container_name: rag_notebook
    ports:
      - "8888:8888"           # Jupyter
    environment:
      # --- MinIO/S3 ---
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-minio_admin}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-minio_admin}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-1}
      S3_ENDPOINT_URL: ${S3_ENDPOINT_URL:-http://minio:9000}

      # --- Pinecone ---
      PINECONE_API_KEY: ${PINECONE_API_KEY}
      PINECONE_REGION: ${PINECONE_REGION:-us-east-1}

      # --- OpenAI ---
      OPENAI_API_KEY: ${OPENAI_API_KEY}

      # --- confort ---
      JUPYTER_TOKEN: ""       # sin token (SOLO en dev local)
      PYTHONPATH: /home/jovyan/work:/home/jovyan/work/tasks:/home/jovyan/work/fastapi_app

      # --- defaults de tu flujo ---
      S3_BUCKET: respaldo2
      BM25_MODEL_KEY: rag/models/2025/bm25.pkl
      CHUNKS_PREFIX: rag/chunks_op/2025/
      PINECONE_INDEX: boletines-2025
      PINECONE_NAMESPACE: "2025"
      EMB_MODEL: sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2
    volumes:
      # Código de la API (para reusar helpers como vector_pinecone_api/s3_boto)
      - ./fastapi_app:/home/jovyan/work/fastapi_app:ro
      # Tus utilidades/índices del pipeline (BM25Index, fusion, etc.)
      - ./plugins/tasks:/home/jovyan/work/tasks:ro
      # Carpeta de notebooks (editables)
      - ./notebooks:/home/jovyan/work/notebooks
    depends_on:
      - minio

  streamlit:
    build:
      context: .
      dockerfile: frontend_streamlit/Dockerfile
    container_name: streamlit_app
    environment:
      # Streamlit hablará con la API por DNS del compose
      - RAG_API_URL=http://rag_api:8000
      # Opcionales para autocompletar en la UI (no imprescindibles)
      - PINECONE_INDEX=${PINECONE_INDEX:-boletines-2025}
      - PINECONE_NAMESPACE=${PINECONE_NAMESPACE:-2025}
      - EMB_MODEL=${EMB_MODEL:-sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2}
    ports:
      - "8501:8501"
    depends_on:
      - rag_api
    restart: unless-stopped
    # Monta la carpeta para hot-reload en dev (opcional)
    volumes:
      - ./frontend_streamlit:/app


volumes:
  postgres-db-volume:
  minio_data:
  mlflow_data:
